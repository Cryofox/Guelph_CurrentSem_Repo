<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".edmx" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#
	var filenameEDMX = "ClousotCacheModel.edmx";
	var inputEDMX = this.Host.ResolvePath(filenameEDMX);
	var xmlDoc = XDocument.Load(inputEDMX, LoadOptions.PreserveWhitespace);
	var eltRoot = xmlDoc.Root;
	var nsEDMX = eltRoot.Name.Namespace;
	var eltRuntime = eltRoot.Element(nsEDMX + "Runtime");
	var eltSSDL = eltRuntime.Element(nsEDMX + MetadataConstants.SSDL_EDMX_SECTION_NAME);
	var eltSchemaSSDL = eltSSDL.Element(((XNamespace)MetadataConstants.SSDL_NAMESPACE_V2) + MetadataConstants.SSDL_ROOT_ELEMENT_NAME);
	if (eltSchemaSSDL == null)
		eltSchemaSSDL = eltSSDL.Element(((XNamespace)MetadataConstants.SSDL_NAMESPACE_V1) + MetadataConstants.SSDL_ROOT_ELEMENT_NAME);
	var nsSSDL = eltSchemaSSDL.Name.Namespace;

	//
	eltRoot.AddBeforeSelf(new XComment(String.Format(
		" This file has been generated from {0} with {1} ",
		filenameEDMX, Path.GetFileName(this.Host.TemplateFile))), '\n',
		new XComment(" Do not modify this file directly since it will be regenerated and your changes will be overwritten "), '\n', '\n');

	// Provider, ProviderManifestToken
	eltSchemaSSDL.SetAttributeValue("Provider", "System.Data.SqlClient");
	eltSchemaSSDL.SetAttributeValue("ProviderManifestToken", "2005");
	
	foreach (var eltEntityContainer in eltSchemaSSDL.Elements(nsSSDL + "EntityContainer"))
		foreach (var eltEntitySet in eltEntityContainer.Elements(nsSSDL + "EntitySet"))
			eltEntitySet.SetAttributeValue("Schema", "dbo"); // <EntitySet Schema="dbo" />

	foreach (var eltEntityType in eltSchemaSSDL.Elements(nsSSDL + "EntityType"))
		foreach (var eltProperty in eltEntityType.Elements(nsSSDL + "Property"))
			if (eltProperty.Attribute("Name").Value.ToLower() == "id")
				eltProperty.SetAttributeValue("StoreGeneratedPattern", "Identity"); // <Property Name="Id" StoreGeneratedPattern="Identity" />
	
	var eltCSDL = eltRuntime.Element(nsEDMX + MetadataConstants.CSDL_EDMX_SECTION_NAME);
	var eltSchemaCSDL = eltCSDL.Element(((XNamespace)MetadataConstants.CSDL_NAMESPACE_V2) + MetadataConstants.CSDL_ROOT_ELEMENT_NAME);
	if (eltSchemaCSDL == null)
		eltSchemaCSDL = eltCSDL.Element(((XNamespace)MetadataConstants.CSDL_NAMESPACE_V1) + MetadataConstants.CSDL_ROOT_ELEMENT_NAME);
	var nsCSDL = eltSchemaCSDL.Name.Namespace;

	var nsAnnotation = (XNamespace)"http://schemas.microsoft.com/ado/2009/02/edm/annotation";
	
	foreach (var eltEntityType in eltSchemaCSDL.Elements(nsCSDL + "EntityType"))
		foreach(var eltProperty in eltEntityType.Elements(nsCSDL + "Property"))
			if (eltProperty.Attribute("Name").Value.ToLower() == "id")
				eltProperty.SetAttributeValue(nsAnnotation + "StoreGeneratedPattern", "Identity"); // <Property Name="Id" annotation:StoreGeneratedPattern="Identity" />

	var eltDesigner = eltRoot.Element(nsEDMX + "Designer");
	var eltOptions = eltDesigner.Element(nsEDMX + "Options");
	var eltDesignerInfoPropertySet = eltOptions.Element(nsEDMX + "DesignerInfoPropertySet");
	
	// <edmx:DesignerProperty Name="CodeGenerationStrategy" Value="None" />
	eltDesignerInfoPropertySet.Add(
		new XElement(nsEDMX + "DesignerProperty",
		new XAttribute("Name", "CodeGenerationStrategy"),
		new XAttribute("Value", "None")));

#><#= xmlDoc.ToString() #>