digraph G{
"FC:_[0]" -> "FC:Fire2[1]";
"FC:Fire2[1]" -> "Exp:[2]";
"Exp:[2]" -> "=[3]";
"=[3]" -> "hello[4]";
"=[3]" -> "Use:[5]";
"Use:[5]" -> "x[6]";
"Use:[5]" -> "=[7]";
"=[7]" -> "x[8]";
"=[7]" -> "+[9]";
"+[9]" -> "x[10]";
"+[9]" -> "1[11]";
"Exp:[2]" -> "Exp:[12]";
"Exp:[12]" -> "Return:[13]";
"Return:[13]" -> "2[14]";
"FC:_[0]" -> "FC:_[15]";
"FC:_[15]" -> "FC:ArrayAccess[16]";
"FC:ArrayAccess[16]" -> "Exp:[17]";
"Exp:[17]" -> "=[18]";
"=[18]" -> "dot:[19]";
"dot:[19]" -> "Arr[][20]";
"Arr[][20]" -> "myStructArray[21]";
"Arr[][20]" -> "10[22]";
"dot:[19]" -> "varX[23]";
"=[18]" -> "2[24]";
"Exp:[17]" -> "Exp:[25]";
"Exp:[25]" -> "=[26]";
"=[26]" -> "x[27]";
"=[26]" -> "Arr[][28]";
"Arr[][28]" -> "hey[29]";
"Arr[][28]" -> "10[30]";
"Exp:[25]" -> "Exp:[31]";
"Exp:[31]" -> "Return:[32]";
"Return:[32]" -> "'c'[33]";
"FC:_[15]" -> "FC:_[34]";
"FC:_[34]" -> "FC:WhileLoop[35]";
"FC:WhileLoop[35]" -> "Exp:[36]";
"Exp:[36]" -> "=[37]";
"=[37]" -> "x[38]";
"=[37]" -> "0[39]";
"Exp:[36]" -> "Exp:[40]";
"Exp:[40]" -> "while:[41]";
"while:[41]" -> "<[42]";
"<[42]" -> "x[43]";
"<[42]" -> "10[44]";
"while:[41]" -> "Exp:[45]";
"Exp:[45]" -> "Exp:[46]";
"Exp:[46]" -> "Use:[47]";
"Use:[47]" -> "x[48]";
"Use:[47]" -> "=[49]";
"=[49]" -> "x[50]";
"=[49]" -> "+[51]";
"+[51]" -> "x[52]";
"+[51]" -> "1[53]";
"Exp:[40]" -> "Exp:[54]";
"Exp:[54]" -> "Return:[55]";
"Return:[55]" -> "1[56]";
"FC:_[34]" -> "FC:_[57]";
"FC:_[57]" -> "FC:IfCall[58]";
"FC:IfCall[58]" -> "Exp:[59]";
"Exp:[59]" -> "=[60]";
"=[60]" -> "y[61]";
"=[60]" -> "0[62]";
"Exp:[59]" -> "Exp:[63]";
"Exp:[63]" -> "=[64]";
"=[64]" -> "x[65]";
"=[64]" -> "1[66]";
"Exp:[63]" -> "Exp:[67]";
"Exp:[67]" -> "IF:[68]";
"IF:[68]" -> "&&[69]";
"&&[69]" -> "&&[70]";
"&&[70]" -> ">[71]";
">[71]" -> "x[72]";
">[71]" -> "1[73]";
"&&[70]" -> "==[74]";
"==[74]" -> "y[75]";
"==[74]" -> "1[76]";
"&&[69]" -> "==[77]";
"==[77]" -> "x[78]";
"==[77]" -> "1[79]";
"IF:[68]" -> "Exp:[80]";
"Exp:[80]" -> "Exp:[81]";
"Exp:[81]" -> "=[82]";
"=[82]" -> "y[83]";
"=[82]" -> "+[84]";
"+[84]" -> "x[85]";
"+[84]" -> "5[86]";
"Exp:[67]" -> "Exp:[87]";
"Exp:[87]" -> "IF:[88]";
"IF:[88]" -> "![89]";
"![89]" -> "x[90]";
"IF:[88]" -> "Exp:[91]";
"Exp:[91]" -> "Exp:[92]";
"Exp:[92]" -> "-[93]";
"-[93]" -> "y[94]";
"-[93]" -> "6[95]";
"Exp:[87]" -> "Exp:[96]";
"Exp:[96]" -> "Return:[97]";
"Return:[97]" -> "0[98]";
"FC:_[57]" -> "FC:_[99]";
"FC:_[99]" -> "FC:RecursiveFunction[100]";
"FC:RecursiveFunction[100]" -> "Exp:[101]";
"Exp:[101]" -> "IF:[102]";
"IF:[102]" -> "<[103]";
"<[103]" -> "i[104]";
"<[103]" -> "10[105]";
"IF:[102]" -> "Exp:[106]";
"Exp:[101]" -> "Exp:[107]";
"Exp:[107]" -> "IF:[108]";
"IF:[108]" -> "![109]";
"![109]" -> "<[110]";
"<[110]" -> "i[111]";
"<[110]" -> "10[112]";
"IF:[108]" -> "Exp:[113]";
"Exp:[113]" -> "Exp:[114]";
"Exp:[114]" -> "Call:[115]";
"Call:[115]" -> "RecursiveFunction[116]";
"Call:[115]" -> "=[117]";
"=[117]" -> "i[118]";
"=[117]" -> "+[119]";
"+[119]" -> "i[120]";
"+[119]" -> "1[121]";
"Exp:[107]" -> "Exp:[122]";
"Exp:[122]" -> "Return:[123]";
"Return:[123]" -> "i[124]";
"FC:_[99]" -> "FC:_[125]";
"FC:_[125]" -> "FC:ForLoop[126]";
"FC:ForLoop[126]" -> "Exp:[127]";
"Exp:[127]" -> "=[128]";
"=[128]" -> "x[129]";
"=[128]" -> "0[130]";
"Exp:[127]" -> "Exp:[131]";
"Exp:[131]" -> "while:[132]";
"while:[132]" -> "<[133]";
"<[133]" -> "x[134]";
"<[133]" -> "10[135]";
"while:[132]" -> "Exp:[136]";
"Exp:[136]" -> "Use:[137]";
"Use:[137]" -> "x[138]";
"Use:[137]" -> "=[139]";
"=[139]" -> "x[140]";
"=[139]" -> "+[141]";
"+[141]" -> "x[142]";
"+[141]" -> "1[143]";
"Exp:[131]" -> "Exp:[144]";
"Exp:[144]" -> "Return:[145]";
"Return:[145]" -> "0[146]";
"FC:_[125]" -> "FC:main[147]";
"FC:main[147]" -> "Exp:[148]";
"Exp:[148]" -> "Return:[149]";
"Return:[149]" -> "1[150]";
}
