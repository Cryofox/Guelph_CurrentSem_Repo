/* 
This program tests the following Features:
	typedefs 
		int, struct, float, char, other typedefs (identifiers)
	Global Declerations
		int, struct, float, char
	Functions (not calling them)
	Relational Operators, Order of Arithmetic Operations.
	Post-Pre Processor Increment and Decrement.
		Floats, Ints, char, I guess struct could to just like in C...
		although not sure what that'd result in tbh.

		also tests for newline and nullterm
		tests for float 0.0e+24 , - also works.
Chars are in the form
char c = 'c';

//Structs
struct lemons{
	int juice;
};

struct lemons newLemons()
{
	struct lemons lemon;
	return lemon;
}
*/


/* Type Defines */
typedef int  i_A;
typedef char c_A, c_B, c_C;
typedef float f_A, f_B, f_C;
/*
Typedefs are illegal on structs now, as you can't typedef during Decleration,
and you must declare after typedefs. Meaning this type of linking is illegal. Sorry :/
typedef struct somestruct s_A, s_B, s_C;
*/
typedef int  _A, _0123456789A;

typedef _A somenewInt;
typedef int simpleArray[10];

/* Global Declerations */

int a;
int b;
char c;
char d;
float e;
float f;

struct somestruct{
	int x;
	int y;
	int z;
	float a;
	char c;
	struct anotherStruct
	{
	int varX;
	int varY;
	
	};
};
float y;
int arX[12];
struct somestruct structArray[10];




_A tempA;
simpleArray array;
int Fire2()
{
struct anotherStruct myStruct;
int x;
int hello;
	/*Notice how It doesn't care whats returning in abs*/
	return 2;
}

char FireQ(int fire)
{
	int hey[10];

	hey[5];

	return 'c';
}

int main ()
{
	int qwep;
	float y;
	char v;
	int z;
	int x;
	int myArray[20];

	struct somestruct mynewStruct;
/*
	x=1;
	while(x<5)
	{
	x++;
	}
*/
	for(x=1; x<5;x++)
	{
		for(y=1.1; x==5;x++)
		{
			
		}	
		puti(x,y,z);
	}

	myArray[x]=5;


	return 1;
}




/*
 WHILE L_PAREN Expression R_PAREN L_BRACE Brace_Expr R_BRACE Expressions
 { $$ = 
 ContainerExpression(NULL,
 (operatorExpression(WHILE_OP,$3,
  ContainerExpression(NULL,$6,NULL, Expression))),$8, Expression);}


FOR L_PAREN For_1stParam SEMICOLON For_2ndParam SEMICOLON For_3rdParam R_PAREN L_BRACE Brace_Expr R_BRACE Expressions

ContainerExpression(NULL,$3,ContainerExpression(NULL,(operatorExpression(WHILE_OP,$5,
  ContainerExpression(NULL,$10,$7, Expression))),$12, Expression), Expression)




ContainerExpression(NULL,(operatorExpression(WHILE_OP,$5,
 ContainerExpression(NULL,$10, ContainerExpression(NULL,$5,NULL, Expression) , Expression))),$12, Expression)


   





*/
