// CodeContracts
// 
// Copyright (c) Microsoft Corporation
// 
// All rights reserved. 
// 
// MIT License
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
//using System.Linq;
using System.Text;
using System.Diagnostics.Contracts;
using System.Reflection;

namespace System.Runtime.InteropServices {
  // Summary:
  //     Provides a callback mechanism for the type library converter to inform the
  //     caller of the status of the conversion, and involve the caller in the conversion
  //     process itself.
  [ComVisible(true)]
  [Guid("F1C3BF76-C3E4-11d3-88E7-00902754C43A")]
  [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
  public interface ITypeLibImporterNotifySink {
    // Summary:
    //     Notifies the caller that an event occured during the conversion of a type
    //     library.
    //
    // Parameters:
    //   eventKind:
    //     An System.Runtime.InteropServices.ImporterEventKind value indicating the
    //     type of event.
    //
    //   eventCode:
    //     Indicates extra information about the event.
    //
    //   eventMsg:
    //     A message generated by the event.
    void ReportEvent(ImporterEventKind eventKind, int eventCode, string eventMsg);
    //
    // Summary:
    //     Asks the user to resolve a reference to another type library.
    //
    // Parameters:
    //   typeLib:
    //     The object implementing the ITypeLib interface that needs to be resolved.
    //
    // Returns:
    //     The assembly corresponding to typeLib.
    Assembly ResolveRef(object typeLib);
  }
}
